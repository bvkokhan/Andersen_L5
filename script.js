button.addEventListener('click', () => {
    Promise.resolve().then(() => console.log('Microtask 1'));
    console.log('Listener 1');
});

button.addEventListener('click', () => {
    Promise.resolve().then(() => console.log('Microtask 2'));
    console.log('Listener 2');
});

// addEventlistener - браузерная функция, они отслеживают событе клика на кнопку и висят в "режиме 
//ожидания" в части event loop  - WEB API. При нажатии кнопку, поскольку отслеживание событий 
//относятся к макрозадачам, обе коллбек ф-ции помещатся в очередь макрозадач и на этом ивент луп 
//завершается. Поскольку стек пустой, в очереде микрозадач пока ничего нет  ивент луп переходит к 
//очереди макрозадач и начинает выполнятся первая коллбек функция. В ней промис, который 
//отностится к микрозадачам и он планируется(не выполняется) - закидывается в очередь микрозадач. 
//Так же в рамках этой коллбек функции есть синхронный код - console.log('Listener 1'); он 
//выполняется сразу же и мы получаем в консоль первую запись 'Listener 1'. Выполнение первой 
//макрозадачи заканчивается. На этот момент состояние event loop  такое: В очереде макрозадач - 1 
//задача, и в очереде микрозадач - 1 задача. Поскольку микрозадачи в приоритете event loop 
//переходит к выполнению промиса и мы получаем в консоль 'Microtask 1'. Далее приходит очередеь 
//второй макрозадачи - второй коллбек функции. В ней мы так же видим промис, который относится к 
//микрозадачам, а это значит, что он планируется в очередь микрозадач. После этого выполняется 
//синхронный console.log и мы получаем вторую запись в консоль 'Listener 2'. Завершается 
//выполнение второй макрозадачи. Сейчас в очереди макрозадач - пусто, в очереди микрозадач - 1 
//задача, ивент луп переходит к ней и мы получаем в консоль 'Microtask 2'.




button.addEventListener('click', () => {
    Promise.resolve().then(() => console.log('Microtask 1'));
    console.log('Listener 1');
});

button.addEventListener('click', () => {
    Promise.resolve().then(() => console.log('Microtask 2'));
    console.log('Listener 2');
});

button.click();

//В данном случае клик генерируется програмно и является вложенным событием, которое,
// обрвбвтывается синхронно. Соответственно и наши коллбек функции выполняются как синхронный код. //По event loop это выглядит так: Синхронно выполняется коллбек функция, в которой промис ставится //в очередь микрозадач, а console.log выполняется так же, синхронно. Мы получаем в консоле 
//'Listener 1'. далее, поскольку у синхронных событий самый высокий приоритет, выше чем у 
//микрозадач, выполняется вторая коллбекфункция, тоже синхронно в которой промис становится в 
//очередь микрозадач под №2 а синхронный console.log выполняется и мы в консоль получаем второую 
//запись 'Listener 2', после чего, поскольку не осталось синхронного кода event loop переходит к 
//выпонению очереди микрозадач и выполняет подряд первый и второй промис. мы получаем в консоль 
//соответственно 'Listener 1' и 'Listener 2'.